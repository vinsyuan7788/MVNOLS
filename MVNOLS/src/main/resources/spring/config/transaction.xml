<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd ">

	<!-- 
		This file contains the declarative transaction configuration in Spring, which contains
		1. Transaction Manager configuration 
		2. Transaction declaration
		3. Transaction AOP configuration
	-->
	
	<!-- 
		Transaction manager: to specify the transaction manager. There are various transaction managers:
		1. JDoTransactionManager: for MyBatis & JDBC
		2. HibernateTransactionManager: for Hibernate
		3. DataSourceTransactionManager
		... (refer to the source code)
	-->
	<bean id = "transactionManager" class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- Configure the dataSource -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 
		Transaction declaration:
		1. Specify the transaction processing strategy
		2. Integrated with target methods through AOP configuration  
	-->
	<tx:advice id="tx" transaction-manager="transactionManager">
		<tx:attributes>
			<!--
				name: specify the name of the target methods for transaction strategies
					1. Transaction manager will manage the transaction (as an aspect) for those target methods regulated by "name" according to isolation, propagation and read-only
					2. can serve as programming regulation 
				read-only:
					1. true: read-only transaction: when querying the data, the data is locked
					2. false: read-write transaction
				isolation: isolation mechanism, which is "default" usually , meaning use the default isolation mechanism of the DB
				    1. There are dirty-read, phantom-read, repeatable-read, serializable
				propagation: to process transaction nesting, which is "required" that is by default and most-usually used
					1. required: open an transaction for a method M, if there are methods in M, those methods are automatically included in current transaction.  
			 		2. supports: the target method can be either in a transaction or not. Transaction is not required for the target method
			 	rollback-for: the cause that trigger transaction rollback
			 		1. Default is RuntimeException: ONLY catching RuntimeException, transaction rollbacks; for other exception transaction still commits
			 		2. Set to "Exception": any exception will rollback the transaction
			 -->
			<tx:method name="save*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
			<tx:method name="add*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
			<tx:method name="insert*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
			<tx:method name="activate*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
			<tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
			<tx:method name="recover*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
			<tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
			<tx:method name="put*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" rollback-for="Exception"/>
			<tx:method name="query*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true" rollback-for="Exception"/>
			<tx:method name="get*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 
		Transaction AOP configuration for service layer
		1. Any method regulated by the "name" attribute of <tx:method> in ServiceImpl packages is a transaction
		   ** All the Operations|methods (that operates DB) in target methods either succeed, or fail if any operation fails (i.e. throws out a RuntimException)
		   ** When all operations succeed, transaction commits, otherwise roll-backs.
	-->
	<aop:config proxy-target-class="false">
		<aop:pointcut expression="execution(* cn.itcast.*.service.impl.*.*(..))" id="serviceImplTarget"/>
		<aop:advisor advice-ref="tx" pointcut-ref="serviceImplTarget"/>
	</aop:config>
	
</beans>
